// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	sql "github.com/gofreego/database/sql"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// BeginTransaction provides a mock function with given fields: ctx, options
func (_m *Database) BeginTransaction(ctx context.Context, options ...sql.Options) (sql.Transaction, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 sql.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...sql.Options) (sql.Transaction, error)); ok {
		return rf(ctx, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...sql.Options) sql.Transaction); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...sql.Options) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields: ctx
func (_m *Database) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, table, condition, values, options
func (_m *Database) Delete(ctx context.Context, table *sql.Table, condition *sql.Condition, values []interface{}, options ...sql.Options) (int64, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, table, condition, values)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Table, *sql.Condition, []interface{}, ...sql.Options) (int64, error)); ok {
		return rf(ctx, table, condition, values, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Table, *sql.Condition, []interface{}, ...sql.Options) int64); ok {
		r0 = rf(ctx, table, condition, values, options...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Table, *sql.Condition, []interface{}, ...sql.Options) error); ok {
		r1 = rf(ctx, table, condition, values, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, record, options
func (_m *Database) DeleteByID(ctx context.Context, record sql.Record, options ...sql.Options) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) (bool, error)); ok {
		return rf(ctx, record, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) bool); ok {
		r0 = rf(ctx, record, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.Record, ...sql.Options) error); ok {
		r1 = rf(ctx, record, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, filter, values, record, options
func (_m *Database) Get(ctx context.Context, filter *sql.Filter, values []interface{}, record sql.Records, options ...sql.Options) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter, values, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Filter, []interface{}, sql.Records, ...sql.Options) error); ok {
		r0 = rf(ctx, filter, values, record, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, record, options
func (_m *Database) GetByID(ctx context.Context, record sql.Record, options ...sql.Options) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) error); ok {
		r0 = rf(ctx, record, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, record, options
func (_m *Database) Insert(ctx context.Context, record sql.Record, options ...sql.Options) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) error); ok {
		r0 = rf(ctx, record, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMany provides a mock function with given fields: ctx, records, options
func (_m *Database) InsertMany(ctx context.Context, records []sql.Record, options ...sql.Options) (int64, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, records)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []sql.Record, ...sql.Options) (int64, error)); ok {
		return rf(ctx, records, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []sql.Record, ...sql.Options) int64); ok {
		r0 = rf(ctx, records, options...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []sql.Record, ...sql.Options) error); ok {
		r1 = rf(ctx, records, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Database) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunSP provides a mock function with given fields: ctx, spName, params, record, options
func (_m *Database) RunSP(ctx context.Context, spName string, params *sql.SPParams, record sql.SPResult, options ...sql.Options) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, spName, params, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sql.SPParams, sql.SPResult, ...sql.Options) error); ok {
		r0 = rf(ctx, spName, params, record, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDelete provides a mock function with given fields: ctx, table, condition, values, options
func (_m *Database) SoftDelete(ctx context.Context, table *sql.Table, condition *sql.Condition, values []interface{}, options ...sql.Options) (int64, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, table, condition, values)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Table, *sql.Condition, []interface{}, ...sql.Options) (int64, error)); ok {
		return rf(ctx, table, condition, values, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Table, *sql.Condition, []interface{}, ...sql.Options) int64); ok {
		r0 = rf(ctx, table, condition, values, options...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Table, *sql.Condition, []interface{}, ...sql.Options) error); ok {
		r1 = rf(ctx, table, condition, values, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteByID provides a mock function with given fields: ctx, record, options
func (_m *Database) SoftDeleteByID(ctx context.Context, record sql.Record, options ...sql.Options) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) (bool, error)); ok {
		return rf(ctx, record, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) bool); ok {
		r0 = rf(ctx, record, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.Record, ...sql.Options) error); ok {
		r1 = rf(ctx, record, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, table, updates, condition, values, options
func (_m *Database) Update(ctx context.Context, table *sql.Table, updates *sql.Updates, condition *sql.Condition, values []interface{}, options ...sql.Options) (int64, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, table, updates, condition, values)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Table, *sql.Updates, *sql.Condition, []interface{}, ...sql.Options) (int64, error)); ok {
		return rf(ctx, table, updates, condition, values, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Table, *sql.Updates, *sql.Condition, []interface{}, ...sql.Options) int64); ok {
		r0 = rf(ctx, table, updates, condition, values, options...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Table, *sql.Updates, *sql.Condition, []interface{}, ...sql.Options) error); ok {
		r1 = rf(ctx, table, updates, condition, values, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, record, options
func (_m *Database) UpdateByID(ctx context.Context, record sql.Record, options ...sql.Options) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) (bool, error)); ok {
		return rf(ctx, record, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) bool); ok {
		r0 = rf(ctx, record, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.Record, ...sql.Options) error); ok {
		r1 = rf(ctx, record, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, record, options
func (_m *Database) Upsert(ctx context.Context, record sql.Record, options ...sql.Options) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) (bool, error)); ok {
		return rf(ctx, record, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.Record, ...sql.Options) bool); ok {
		r0 = rf(ctx, record, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.Record, ...sql.Options) error); ok {
		r1 = rf(ctx, record, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
