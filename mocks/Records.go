// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	sql "github.com/gofreego/database/sql"
	mock "github.com/stretchr/testify/mock"
)

// Records is an autogenerated mock type for the Records type
type Records struct {
	mock.Mock
}

// Columns provides a mock function with no fields
func (_m *Records) Columns() []*sql.Field {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Columns")
	}

	var r0 []*sql.Field
	if rf, ok := ret.Get(0).(func() []*sql.Field); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sql.Field)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: rows
func (_m *Records) Scan(rows sql.Rows) error {
	ret := _m.Called(rows)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sql.Rows) error); ok {
		r0 = rf(rows)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Table provides a mock function with no fields
func (_m *Records) Table() *sql.Table {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Table")
	}

	var r0 *sql.Table
	if rf, ok := ret.Get(0).(func() *sql.Table); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Table)
		}
	}

	return r0
}

// NewRecords creates a new instance of Records. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecords(t interface {
	mock.TestingT
	Cleanup(func())
}) *Records {
	mock := &Records{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
