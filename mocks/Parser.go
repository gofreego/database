// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	sql "github.com/gofreego/database/sql"
	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// ParseDeleteByIDQuery provides a mock function with given fields: record
func (_m *Parser) ParseDeleteByIDQuery(record sql.Record) (string, error) {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for ParseDeleteByIDQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(sql.Record) (string, error)); ok {
		return rf(record)
	}
	if rf, ok := ret.Get(0).(func(sql.Record) string); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sql.Record) error); ok {
		r1 = rf(record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseDeleteQuery provides a mock function with given fields: table, condition
func (_m *Parser) ParseDeleteQuery(table *sql.Table, condition *sql.Condition) (string, []int, error) {
	ret := _m.Called(table, condition)

	if len(ret) == 0 {
		panic("no return value specified for ParseDeleteQuery")
	}

	var r0 string
	var r1 []int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Table, *sql.Condition) (string, []int, error)); ok {
		return rf(table, condition)
	}
	if rf, ok := ret.Get(0).(func(*sql.Table, *sql.Condition) string); ok {
		r0 = rf(table, condition)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*sql.Table, *sql.Condition) []int); ok {
		r1 = rf(table, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}

	if rf, ok := ret.Get(2).(func(*sql.Table, *sql.Condition) error); ok {
		r2 = rf(table, condition)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseGetByFilterQuery provides a mock function with given fields: filter, records
func (_m *Parser) ParseGetByFilterQuery(filter *sql.Filter, records sql.Records) (string, []int, error) {
	ret := _m.Called(filter, records)

	if len(ret) == 0 {
		panic("no return value specified for ParseGetByFilterQuery")
	}

	var r0 string
	var r1 []int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Filter, sql.Records) (string, []int, error)); ok {
		return rf(filter, records)
	}
	if rf, ok := ret.Get(0).(func(*sql.Filter, sql.Records) string); ok {
		r0 = rf(filter, records)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*sql.Filter, sql.Records) []int); ok {
		r1 = rf(filter, records)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}

	if rf, ok := ret.Get(2).(func(*sql.Filter, sql.Records) error); ok {
		r2 = rf(filter, records)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseGetByIDQuery provides a mock function with given fields: record
func (_m *Parser) ParseGetByIDQuery(record sql.Record) (string, error) {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for ParseGetByIDQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(sql.Record) (string, error)); ok {
		return rf(record)
	}
	if rf, ok := ret.Get(0).(func(sql.Record) string); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sql.Record) error); ok {
		r1 = rf(record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseInsertQuery provides a mock function with given fields: record
func (_m *Parser) ParseInsertQuery(record ...sql.Record) (string, []interface{}, error) {
	_va := make([]interface{}, len(record))
	for _i := range record {
		_va[_i] = record[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ParseInsertQuery")
	}

	var r0 string
	var r1 []interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(...sql.Record) (string, []interface{}, error)); ok {
		return rf(record...)
	}
	if rf, ok := ret.Get(0).(func(...sql.Record) string); ok {
		r0 = rf(record...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(...sql.Record) []interface{}); ok {
		r1 = rf(record...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(...sql.Record) error); ok {
		r2 = rf(record...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseSoftDeleteByIDQuery provides a mock function with given fields: table, record
func (_m *Parser) ParseSoftDeleteByIDQuery(table *sql.Table, record sql.Record) (string, error) {
	ret := _m.Called(table, record)

	if len(ret) == 0 {
		panic("no return value specified for ParseSoftDeleteByIDQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Table, sql.Record) (string, error)); ok {
		return rf(table, record)
	}
	if rf, ok := ret.Get(0).(func(*sql.Table, sql.Record) string); ok {
		r0 = rf(table, record)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*sql.Table, sql.Record) error); ok {
		r1 = rf(table, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseSoftDeleteQuery provides a mock function with given fields: table, condition
func (_m *Parser) ParseSoftDeleteQuery(table *sql.Table, condition *sql.Condition) (string, []int, error) {
	ret := _m.Called(table, condition)

	if len(ret) == 0 {
		panic("no return value specified for ParseSoftDeleteQuery")
	}

	var r0 string
	var r1 []int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Table, *sql.Condition) (string, []int, error)); ok {
		return rf(table, condition)
	}
	if rf, ok := ret.Get(0).(func(*sql.Table, *sql.Condition) string); ok {
		r0 = rf(table, condition)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*sql.Table, *sql.Condition) []int); ok {
		r1 = rf(table, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}

	if rf, ok := ret.Get(2).(func(*sql.Table, *sql.Condition) error); ok {
		r2 = rf(table, condition)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseUpdateByIDQuery provides a mock function with given fields: record
func (_m *Parser) ParseUpdateByIDQuery(record sql.Record) (string, error) {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for ParseUpdateByIDQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(sql.Record) (string, error)); ok {
		return rf(record)
	}
	if rf, ok := ret.Get(0).(func(sql.Record) string); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sql.Record) error); ok {
		r1 = rf(record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpdateQuery provides a mock function with given fields: table, updates, condition
func (_m *Parser) ParseUpdateQuery(table *sql.Table, updates *sql.Updates, condition *sql.Condition) (string, []int, error) {
	ret := _m.Called(table, updates, condition)

	if len(ret) == 0 {
		panic("no return value specified for ParseUpdateQuery")
	}

	var r0 string
	var r1 []int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Table, *sql.Updates, *sql.Condition) (string, []int, error)); ok {
		return rf(table, updates, condition)
	}
	if rf, ok := ret.Get(0).(func(*sql.Table, *sql.Updates, *sql.Condition) string); ok {
		r0 = rf(table, updates, condition)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*sql.Table, *sql.Updates, *sql.Condition) []int); ok {
		r1 = rf(table, updates, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int)
		}
	}

	if rf, ok := ret.Get(2).(func(*sql.Table, *sql.Updates, *sql.Condition) error); ok {
		r2 = rf(table, updates, condition)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseUpsertQuery provides a mock function with given fields: record
func (_m *Parser) ParseUpsertQuery(record sql.Record) (string, []interface{}, error) {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for ParseUpsertQuery")
	}

	var r0 string
	var r1 []interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(sql.Record) (string, []interface{}, error)); ok {
		return rf(record)
	}
	if rf, ok := ret.Get(0).(func(sql.Record) string); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sql.Record) []interface{}); ok {
		r1 = rf(record)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(sql.Record) error); ok {
		r2 = rf(record)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
